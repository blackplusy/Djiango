Django
	1、后端，web框架(必须Django的规则进行约定俗成的编写);
		例如: class MyUser():
			def __init__():
		if __name__="__main__":
			
	mvc设计模式 分工协作的模式：
			数据库   前端   后端   整合
			 数据    展示   逻辑（从数据库里取数据放到前端展示)
		mvc框架实现的mvc设计模式
	m model模型 (数据）
	v view 视图(页面)
	c controller(逻辑控制）
	有利于分工协作，团队合作
	Django的设计模式:
		mvt设计模式
		m:model数据模型 ORM 对象关系模型可以让Django自动产生数据库里的表
		表table user 字段 name age sex
			update user set age=10 where id=1
		python class User这个类有属性name age sex
			age=10
		v:view视图  前端页面(返回模板，逻辑)
		t:template模板  页面----->模板
		改进的mvc模式，m不变，c+v合并变成v 建立独有v的概念 t模板
	任务:用JDjango建立简单的web网站.
	Django的工作过程:
		用户发出请求--->Django服务器view里面方法---->调用数据model------>利用ORM关系模型----->表(select)---->取出记录---->回传给model--->把取得数据告知view---->通过逻辑(比如注册:通过name=,age=,sex=完成数据的操作,如果还需要回传model,再去访问数据库的表,如果不需要，直接到程序最后)。------->去django template里面找模板，找view对应的模板------>模板返回view------>给用户响应（用户看到的界面：template+数据）
	说明：我们今天案例的图标字体:
		font-awesome插件
	  工具开发Pycharm
     Django的安装
		安装步骤
			pip3 install django
		安装完以后，创建Django项目
			django-admin startproject 项目名称
		创建完django框架，创建user应用
			django-admin startapp 应用名称
		创建完应用，就有models.py，views.py
		models.py里面进行数据的创建
		views.py进行逻辑的编写
   Django models的创建
		varchar类型 username=models.CharField(max_length=20)
		自动创建id
		我们用mysql，需要修改settins的设置
		settings.py位置:django项目目录mypro
				mypro/mypro/settings.py
		找到DATABASES:
			改成mysql:django.db.backends.mysql
			加入:'HOST'='localhost',
			      'PORT'=3306,
				'USER'='root',
				'PASSWORD'='admin'
				'NAME:你在数据库里建立的数据库名
		注意:创建数据库时，要用create database mytest default charset=utf8;为了你能够在产生的表里输入中文 .
		第二步：把你自己的应用放到settings里面的INSTALLED_APPS里面	
	用python命令产生ORM关系模型
		python manage.py makemigrations	
		注意::::如果报错:MySQLdb 
		在项目文件夹/项目名称/__init__.py
		加上两句话:
			import pymysql
			pymysql.install_as_MySQLdb()
		加上以后再执行
			python3 manage.py makemigrations
			
		出现的效果:
		Migrations for 'user':
  			user/migrations/0001_initial.py
    			- Create model User
		后面又执行
			python3 manage.py migrate
		 数据库里面命令:
			desc 表名看一下表格结构
		处理views.py
			定义一个方法,方法要有参数request,表示对请求的处理
			def register(request):
			找模板,比如我们的模板都在templates
			return render(request,'templates/index.html')
			配置settings.py
			TEMPLATES=[
				DIRS:[os.path.join(BASE_DIR,'templates']			
			]
		如果网页中css,js,images在django静态资源，django里面是templates,templates里面只认html,提供static
		settings.py
		   文件尾部:
			STATICFILES_DIRS=[
				os.path.join(BASE_DIR,'static')
			]
			在项目文件夹里建一个static
			修改网页源文件引用路径“/static/"
	     思路:
		1、先确定templates里面什么页面
		2、urls.py里面用什么样的路径区配，匹配到views.py里面的哪一个方法
		3、在 views.py里面定义这个方法
		4、涉及到models，引用models里面的类
		5、无论怎么样，都在return render(request,找到templates里面的页面)
		6、启动
	  额外
		数据模型建立
			手动建立
			python manage.py makemigrations
			python manage.py migrate
	建立Django应用
			django-admin startapp user
	手动

		
		


		
		 
		
	
